name: ${APP_NAME:-app}-dev

services:
  # Main PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ${APP_NAME:-app}-postgres-dev
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app_main}
      POSTGRES_USER: ${POSTGRES_USER:-app_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-app_password}
    # Add external port for database clients (different from soft-compass)
    ports:
      - "${POSTGRES_EXTERNAL_PORT:-5434}:5432"
    networks:
      - app-network-dev
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-app_user}" ]
      interval: 30s
      timeout: 5s
      retries: 5

  # API Service with hot-reload
  api:
    build:
      context: .
      dockerfile: ./packages/api/Dockerfile.dev
    container_name: ${APP_NAME:-app}-api-dev
    environment:
      NODE_ENV: development
      DATABASE_URL: ${DATABASE_URL:-postgresql://app_user:app_password@postgres:5432/app_main}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-app_main}
      POSTGRES_USER: ${POSTGRES_USER:-app_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-app_password}
      # Application configuration
      APP_NAME: ${APP_NAME:-app}
      COOKIE_SECRET: ${COOKIE_SECRET:-your-cookie-secret-here-change-in-production}
      SESSION_EXPIRATION_MINUTES: ${SESSION_EXPIRATION_MINUTES:-120}
      GOOGLE_AUTH_CLIENT_ID: ${GOOGLE_AUTH_CLIENT_ID}
      GOOGLE_AUTH_CLIENT_SECRET: ${GOOGLE_AUTH_CLIENT_SECRET}
      GOOGLE_AUTH_CALLBACK_URL: ${GOOGLE_AUTH_CALLBACK_URL:-http://localhost:8080/api/access/google/redirect}
      GOOGLE_AUTH_RETURN_URL: ${GOOGLE_AUTH_RETURN_URL:-http://localhost:8080}
      SYSTEM_USER_EMAIL: ${SYSTEM_USER_EMAIL:-system@template.com}
      SYSTEM_USER_ALIAS: ${SYSTEM_USER_ALIAS:-System}
      SYSTEM_USER_FIRST_NAME: ${SYSTEM_USER_FIRST_NAME:-System}
      SYSTEM_USER_LAST_NAME: ${SYSTEM_USER_LAST_NAME:-User}
      SFTP_HOST: sftp
      SFTP_PORT: 22
      SFTP_USERNAME: ${SFTP_USERNAME:-app_user}
      SFTP_PASSWORD: ${SFTP_PASSWORD:-app_sftp_password}
      FE_URL: ${FE_URL:-http://localhost:8080}
      OPENSEARCH_URL: ${OPENSEARCH_URL:-http://opensearch:9200}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_REQUESTS: ${LOG_REQUESTS:-false}
      CORS_ORIGIN: ${CORS_ORIGIN}
      AUTH_TOKEN: ${AUTH_TOKEN}
    # Add debugging port (different from soft-compass)
    ports:
      - "9230:9229"  # Node.js debugging port
    depends_on:
      postgres:
        condition: service_healthy
      sftp:
        condition: service_started
      opensearch:
        condition: service_healthy
    networks:
      - app-network-dev
    restart: unless-stopped
    volumes:
      - ./packages/api:/app
      - ./packages/shared:/app/shared
      - api_node_modules:/app/node_modules
      - ./packages/api/upload:/app/upload
      - api_logs:/app/logs
    command: npm run dev

  # Web Application with hot-reload
  web:
    build:
      context: ./packages/web
      dockerfile: Dockerfile.dev
    container_name: ${APP_NAME:-app}-web-dev
    environment:
      - VITE_HOST=0.0.0.0
      - VITE_PORT=5173
      - VITE_API_URL=${VITE_API_URL:-http://localhost:8080}
      - VITE_SITE_NAME=${VITE_SITE_NAME:-My App}
      - VITE_HMR_CLIENT_PORT=${VITE_HMR_CLIENT_PORT:-8080}
      - CHOKIDAR_USEPOLLING=true # Enable polling for file changes in Docker
      - WATCHPACK_POLLING=true
    # No external ports - only accessible via nginx
    volumes:
      # Mount source code for hot-reload
      - ./packages/web:/app
      # Prevent node_modules from being overwritten
      - web_node_modules:/app/node_modules
    networks:
      - app-network-dev
    restart: unless-stopped
    stdin_open: true
    tty: true

  # Nginx Reverse Proxy - ONLY external access point
  nginx:
    image: nginx:alpine
    container_name: ${APP_NAME:-app}-nginx-dev
    ports:
      - "${NGINX_HTTP_PORT:-8080}:80"
    volumes:
      - ./services/nginx/nginx.dev.conf:/etc/nginx/nginx.conf:ro
      - ./services/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      api:
        condition: service_started
      web:
        condition: service_started
    networks:
      - app-network-dev
    restart: unless-stopped

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: ${APP_NAME:-app}-rabbitmq-dev
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-guest}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST:-/}
    # Add management UI port (different from soft-compass)
    ports:
      - "${RABBITMQ_MANAGEMENT_PORT:-15673}:15672"
    volumes:
      - rabbitmq_dev_data:/var/lib/rabbitmq
    networks:
      - app-network-dev
    restart: unless-stopped
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
  # Message Publisher Service
  message-publisher:
    build:
      context: .
      dockerfile: ./services/message-publisher/Dockerfile
      target: development
    container_name: ${APP_NAME:-app}-message-publisher-dev
    environment:
      NODE_ENV: development
      DATABASE_URL: ${DATABASE_URL:-postgresql://app_user:app_password@postgres:5432/app_main}
      RABBITMQ_URL: ${RABBITMQ_URL:-amqp://guest:guest@rabbitmq:5672}
      LOG_LEVEL: ${MESSAGE_PUBLISHER_LOG_LEVEL:-debug}
      CDC_OUTBOX_CONFIG_PATH: /app/config/cdc-outbox.yml
    volumes:
      - ./packages/api/drizzle/config/cdc-outbox.yml:/app/config/cdc-outbox.yml:ro
      - ./services/message-publisher:/app
      - message_publisher_node_modules:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network-dev
    restart: unless-stopped

  # SFTP Server
  sftp:
    image: atmoz/sftp:latest
    container_name: ${APP_NAME:-app}-sftp-dev
    environment:
      SFTP_USERS: "${SFTP_USERNAME:-app_user}:${SFTP_PASSWORD:-app_sftp_password}:1001:1001:upload"
    # Add external port (different from soft-compass)
    ports:
      - "${SFTP_PORT:-2223}:22"
    volumes:
      - sftp_dev_data:/home/${SFTP_USERNAME:-app_user}/upload
    networks:
      - app-network-dev
    restart: unless-stopped

  opensearch:
    image: opensearchproject/opensearch:2.11.1
    container_name: ${APP_NAME:-app}-opensearch-dev
    environment:
      - discovery.type=single-node
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - plugins.security.disabled=true
      - cluster.name=indexes-app-logs-dev  # Different cluster name
      - node.name=indexes-app-node-dev-1   # Different node name
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - opensearch_dev_data:/usr/share/opensearch/data
    # Add external ports (different from soft-compass)
    ports:
      - "${OPENSEARCH_PORT:-9201}:9200"
      - "${OPENSEARCH_TRANSPORT_PORT:-9301}:9300"
    networks:
      - app-network-dev
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5

  # OpenSearch Dashboards for log visualization
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:2.11.1
    container_name: ${APP_NAME:-app}-opensearch-dashboards-dev
    environment:
      OPENSEARCH_HOSTS: '["http://opensearch:9200"]'
      DISABLE_SECURITY_DASHBOARDS_PLUGIN: "true"
      OPENSEARCH_SECURITY_DISABLED: "true"
    command: >
      bash -c "
        ./bin/opensearch-dashboards-plugin remove securityDashboards --allow-root || true;
        ./bin/opensearch-dashboards-plugin remove alertingDashboards --allow-root || true;
        ./bin/opensearch-dashboards-plugin remove anomalyDetectionDashboards --allow-root || true;
        ./bin/opensearch-dashboards-plugin remove indexManagementDashboards --allow-root || true;
        ./bin/opensearch-dashboards-plugin remove notificationsDashboards --allow-root || true;
        ./bin/opensearch-dashboards-plugin remove reportsDashboards --allow-root || true;
        ./bin/opensearch-dashboards-plugin remove securityAnalyticsDashboards --allow-root || true;
        echo 'opensearch.hosts: [\"http://opensearch:9200\"]' > /usr/share/opensearch-dashboards/config/opensearch_dashboards.yml;
        echo 'server.host: \"0.0.0.0\"' >> /usr/share/opensearch-dashboards/config/opensearch_dashboards.yml;
        echo 'opensearch.ssl.verificationMode: none' >> /usr/share/opensearch-dashboards/config/opensearch_dashboards.yml;
        ./opensearch-dashboards-docker-entrypoint.sh
      "
    # Add external port (different from soft-compass)
    ports:
      - "${OPENSEARCH_DASHBOARDS_PORT:-5602}:5601"
    depends_on:
      opensearch:
        condition: service_healthy
    networks:
      - app-network-dev
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5



networks:
  app-network-dev:
    driver: bridge

volumes:
  postgres_dev_data:
    driver: local
  rabbitmq_dev_data:
    driver: local
  sftp_dev_data:
    driver: local
  sftp_host_keys:
    driver: local
  opensearch_dev_data:
    driver: local
  api_node_modules:
    driver: local
  api_logs:
    driver: local
  web_node_modules:
    driver: local
  message_publisher_node_modules:
    driver: local